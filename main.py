import os
import logging
import google.generativeai as genai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from datetime import datetime, timedelta
import random
import pytz

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Environment Variables ржерзЗржХрзЗ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи рж▓рзЛржб
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))

# ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓
current_gemini_api_key = GEMINI_API_KEY
model = None
current_model_name = 'gemini-1.5-flash'
custom_welcome_message = None
current_language = 'Bengali'
last_emoji_index = -1

# ржЙржкрж▓ржмрзНржз ржоржбрзЗрж▓
AVAILABLE_MODELS = [
    {'name': 'gemini-1.5-flash', 'display': 'Gemini 1.5 Flash', 'description': 'ЁЯОп Stable & reliable'},
    {'name': 'gemini-1.5-pro', 'display': 'Gemini 1.5 Pro', 'description': 'ЁЯза Most intelligent'},
]

# ржкрзНрж░ржЬрж╛ржкрждрж┐ ржЗржорзЛржЬрж┐
BUTTERFLY_EMOJIS = ["ЁЯжЛ", "ЁЯжЛтЬи", "ЁЯжЛЁЯМЯ", "ЁЯжЛЁЯТл"]

# рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ
user_statistics = {}
api_usage = {}
user_limits = {'daily_messages': 100, 'hourly_messages': 20, 'api_calls': 50}
conversation_context = {}
group_activity = {}

def initialize_gemini_model(api_key, model_name='gemini-1.5-flash'):
    global model, current_gemini_api_key, current_model_name
    try:
        logger.info(f"Gemini API ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛: {model_name}")
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(model_name)
        current_gemini_api_key = api_key
        current_model_name = model_name
        logger.info(f"Gemini ржоржбрзЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬржб: {model_name}")
        return True, f"тЬЕ Gemini API рж╕ржлрж▓ржнрж╛ржмрзЗ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {model_name}!"
    except Exception as e:
        logger.error(f"Gemini API ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржмрзНржпрж░рзНрже: {str(e)}")
        return False, f"тЭМ Gemini API ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржирзЗ рждрзНрж░рзБржЯрж┐: {str(e)}"

# Gemini API ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи
if GEMINI_API_KEY:
    success, message = initialize_gemini_model(GEMINI_API_KEY)
    if success:
        logger.info("Gemini API ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬржб")
    else:
        logger.error(f"Gemini API ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржмрзНржпрж░рзНрже: {message}")
else:
    logger.warning("GEMINI_API_KEY рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред /api ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")

class TelegramGeminiBot:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            logger.error("ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЯрзЛржХрзЗржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            raise ValueError("ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЯрзЛржХрзЗржи рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("api", self.api_command))
        self.application.add_handler(CommandHandler("setadmin", self.setadmin_command))
        self.application.add_handler(CommandHandler("automode", self.automode_command))
        self.application.add_handler(CommandHandler("setwelcome", self.setwelcome_command))
        self.application.add_handler(CommandHandler("setmodel", self.setmodel_command))
        self.application.add_handler(CommandHandler("setlanguage", self.setlanguage_command))
        self.application.add_handler(CommandHandler("ping", self.ping_command))
        self.application.add_handler(CommandHandler("me", self.me_command))
        self.application.add_handler(CommandHandler("joke", self.joke_command))
        self.application.add_handler(CommandHandler("time", self.time_command))
        self.application.add_handler(CommandHandler("info", self.info_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("limits", self.limits_command))
        self.application.add_handler(CommandHandler("resetlimits", self.resetlimits_command))
        self.application.add_handler(CommandHandler("reboot", self.reboot_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if custom_welcome_message:
            await update.message.reply_text(custom_welcome_message, parse_mode='Markdown')
            return
        default_welcome_message = """
ЁЯдЦЁЯТм рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЖржкржирж╛рж░ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА AI рж╕рж╣ржХрж╛рж░рзА!
ржЧрзБржЧрж▓ ржЬрзЗржорж┐ржирж╛ржЗ AI ржжрзНржмрж╛рж░рж╛ ржЪрж╛рж▓рж┐ржд, ржЖржорж┐ ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! ЁЯШК
ржХржорж╛ржирзНржбрж╕ржорзВрж╣:
/start - ржПржЗ ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржи
/help - рж╕рж╛рж╣рж╛ржпрзНржп ржПржмржВ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рждржерзНржп ржкрж╛ржи
/clear - ржЧрзНрж░рзБржк ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзБржи
/status - ржЖржорж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░рзБржи
/api <key> - ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setwelcome <message> - ржХрж╛рж╕рзНржЯржо ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setadmin - ржирж┐ржЬрзЗржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзБржи (ржкрзНрж░ржержоржмрж╛рж░рзЗрж░ ржЬржирзНржп)
/automode - ржЧрзНрж░рзБржкрзЗ ржЕржЯрзЛ-рж░рзЗрж╕ржкржирзНрж╕ ржЯржЧрж▓ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setmodel <model> - AI ржоржбрзЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setlanguage <language> - ржбрж┐ржлрж▓рзНржЯ AI рж░рзЗрж╕ржкржирзНрж╕ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/ping - ржмржЯрзЗрж░ рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржо ржЪрзЗржХ ржХрж░рзБржи
/me - ржирж┐ржЬрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ ржоржЬрж╛рж░ ржорзЗрж╕рзЗржЬ ржкрж╛ржи
/joke - ржПржХржЯрж┐ ржЬрзЛржХ рж╢рзБржирзБржи
/time - ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝ ржжрзЗржЦрзБржи
/info - ржЗржЙржЬрж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржи
/stats - ржмржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕ ржжрзЗржЦрзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/limits - ржЗржЙржЬрж╛рж░ рж▓рж┐ржорж┐ржЯ ржорзНржпрж╛ржирзЗржЬ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/resetlimits - рж╕ржм рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/reboot - ржоржЬрж╛рж░ ржЯрзБржЗрж╕рзНржЯ рж╕рж╣ ржмржЯ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
ржЖржорж┐ рж╢рзБржзрзБ ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржХрж░рж┐! ржЖржорж╛ржХрзЗ ржорзЗржирж╢ржи ржХрж░рзБржи (@BotUsername) ржмрж╛ ржЖржорж╛рж░ ржорзЗрж╕рзЗржЬрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржи! ЁЯТХтЬи
"""
        await update.message.reply_text(default_welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        help_message = """
ЁЯЖШЁЯТм рж╕рж╛рж╣рж╛ржпрзНржп ржПржмржВ ржХржорж╛ржирзНржбрж╕ржорзВрж╣:
/start - ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржи
/help - ржПржЗ рж╕рж╛рж╣рж╛ржпрзНржп ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржи
/clear - ржЧрзНрж░рзБржк ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзБржи
/status - ржЖржорж┐ ржарж┐ржХржорждрзЛ ржХрж╛ржЬ ржХрж░ржЫрж┐ ржХрж┐ ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
/api <key> - ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setwelcome <message> - ржХрж╛рж╕рзНржЯржо ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setadmin - ржирж┐ржЬрзЗржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзБржи (ржкрзНрж░ржержоржмрж╛рж░рзЗрж░ ржЬржирзНржп)
/automode - ржЧрзНрж░рзБржкрзЗ ржЕржЯрзЛ-рж░рзЗрж╕ржкржирзНрж╕ ржЯржЧрж▓ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setmodel <model> - AI ржоржбрзЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setlanguage <language> - ржбрж┐ржлрж▓рзНржЯ AI рж░рзЗрж╕ржкржирзНрж╕ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/ping - ржмржЯрзЗрж░ рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржо ржЪрзЗржХ ржХрж░рзБржи
/me - ржирж┐ржЬрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ ржоржЬрж╛рж░ ржорзЗрж╕рзЗржЬ ржкрж╛ржи
/joke - ржПржХржЯрж┐ ржЬрзЛржХ рж╢рзБржирзБржи
/time - ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝ ржжрзЗржЦрзБржи
/info - ржЗржЙржЬрж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржи
/stats - ржмржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕ ржжрзЗржЦрзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/limits - ржЗржЙржЬрж╛рж░ рж▓рж┐ржорж┐ржЯ ржорзНржпрж╛ржирзЗржЬ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/resetlimits - рж╕ржм рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/reboot - ржоржЬрж╛рж░ ржЯрзБржЗрж╕рзНржЯ рж╕рж╣ ржмржЯ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
ЁЯТм ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рж┐:
- ржЖржорж┐ рж╢рзБржзрзБ ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржХрж░рж┐ (ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯрзЗ рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржп)!
- ржЖржорж╛ржХрзЗ ржорзЗржирж╢ржи ржХрж░рзБржи (@BotUsername) ржмрж╛ ржЖржорж╛рж░ ржорзЗрж╕рзЗржЬрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржиред
- ржЖржорж┐ ржЧрзНрж░рзБржк ржХржерзЛржкржХржержирзЗрж░ ржХржиржЯрзЗржХрзНрж╕ржЯ ржоржирзЗ рж░рж╛ржЦрж┐ ржпрждржХрзНрж╖ржг ржирж╛ /clear ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ред
- ржЖржорж┐ ржЗржЙржЬрж╛рж░рзЗрж░ ржнрж╛рж╖рж╛ржпрж╝ рж░рзЗрж╕ржкржирзНрж╕ ржжрзЗржУржпрж╝рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐, рждржмрзЗ ржбрж┐ржлрж▓рзНржЯ ржнрж╛рж╖рж╛ /setlanguage ржжрж┐ржпрж╝рзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржпрж╝ред
- ржЖржорж┐ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг, ржоржЬрж╛рж░ ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ рж╣рждрзЗ ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрж┐!
тЪб ржЧрзБржЧрж▓ ржЬрзЗржорж┐ржирж╛ржЗ AI ржжрзНржмрж╛рж░рж╛ ржЪрж╛рж▓рж┐ржд ЁЯТХ
"""
        await update.message.reply_text(help_message)

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        chat_id = update.effective_chat.id
        if chat_id in conversation_context:
            del conversation_context[chat_id]
        await update.message.reply_text("ЁЯз╣ ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБрждред")

    async def setwelcome_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global custom_welcome_message
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            await update.message.reply_text("ЁЯУЭ ржХржорж╛ржирзНржбрзЗрж░ ржкрж░рзЗ ржПржХржЯрж┐ ржорзЗрж╕рзЗржЬ ржЯрзЗржХрзНрж╕ржЯ ржжрж┐ржиред\nржЙржжрж╛рж╣рж░ржг: /setwelcome рж╕ржмрж╛ржЗржХрзЗ рж╕рзНржмрж╛ржЧрждржо!")
            return
        new_message = ' '.join(context.args)
        custom_welcome_message = new_message
        await update.message.reply_text(f"тЬЕ ржХрж╛рж╕рзНржЯржо ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\nржирждрзБржи ржорзЗрж╕рзЗржЬ:\n{new_message}", parse_mode='Markdown')

    async def setlanguage_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global current_language
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            await update.message.reply_text("ЁЯУЭ ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржнрж╛рж╖рж╛рж░ ржирж╛ржо ржжрж┐ржиред\nржЙржжрж╛рж╣рж░ржг: /setlanguage English ржмрж╛ /setlanguage Bengali")
            return
        new_language = ' '.join(context.args).capitalize()
        current_language = new_language
        await update.message.reply_text(f"тЬЕ AI ржбрж┐ржлрж▓рзНржЯ рж░рзЗрж╕ржкржирзНрж╕ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {new_language}ред\nржирзЛржЯ: ржЖржорж┐ ржкрзНрж░ржержорзЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржнрж╛рж╖рж╛ржпрж╝ рж░рзЗрж╕ржкржирзНрж╕ ржжрзЗржУржпрж╝рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржм!")

    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        bd_timezone = pytz.timezone("Asia/Dhaka")
        bd_time = datetime.now(bd_timezone)
        time_str = bd_time.strftime('%Y-%m-%d %H:%M:%S')
        await update.message.reply_text(f"тП░ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝: {time_str}")

    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        target_user = update.message.reply_to_message.from_user if update.message.reply_to_message else update.effective_user
        if not target_user:
            await update.message.reply_text("тЭМ ржЗржЙржЬрж╛рж░ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            return
        user_id = target_user.id
        first_name = target_user.first_name
        last_name = f" {target_user.last_name}" if target_user.last_name else ""
        full_name = f"{first_name}{last_name}"
        username = f"@{target_user.username}" if target_user.username else "рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ"
        is_bot = "рж╣рзНржпрж╛ржБ ЁЯдЦ" if target_user.is_bot else "ржирж╛ ЁЯСд"
        user_link = f"[{full_name}](tg://user?id={user_id})"
        is_premium = "рж╣рзНржпрж╛ржБ ЁЯМЯ" if getattr(target_user, 'is_premium', False) else "ржирж╛"
        language_code = target_user.language_code if getattr(target_user, 'language_code', None) else "рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ"
        base_date = datetime(2013, 10, 1)
        id_increment = user_id / 1000000
        estimated_creation = base_date + timedelta(days=id_increment * 30)
        creation_date = estimated_creation.strftime('%Y-%m-%d')
        last_active = user_statistics.get(user_id, {}).get('last_active', None)
        last_active_str = last_active.strftime('%Y-%m-%d %H:%M:%S') if last_active else "рж░рзЗржХрж░рзНржб ржХрж░рж╛ ржирзЗржЗ"
        total_messages = user_statistics.get(user_id, {}).get('messages', 0)
        daily_messages = user_statistics.get(user_id, {}).get('messages', 0)
        hourly_count = sum(1 for msg_time in [user_statistics.get(user_id, {}).get('last_active', datetime.now())] if (datetime.now() - msg_time).seconds < 3600)
        try:
            chat_member = await context.bot.get_chat_member(chat_id=update.effective_chat.id, user_id=user_id)
            bio = chat_member.user.bio if hasattr(chat_member.user, 'bio') and chat_member.user.bio else "рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ"
        except Exception:
            bio = "ржЙржкрж▓ржмрзНржз ржиржпрж╝"
        group_list = []
        if user_id == ADMIN_USER_ID:
            for chat_id in group_activity.keys():
                try:
                    chat = await context.bot.get_chat(chat_id)
                    if await context.bot.get_chat_member(chat_id, user_id):
                        group_list.append(chat.title or f"ржЧрзНрж░рзБржк {chat_id}")
                except Exception:
                    continue
            groups = ", ".join(group_list) if group_list else "ржХрзЛржирзЛ ржЧрзНрж░рзБржк рж░рзЗржХрж░рзНржб ржХрж░рж╛ ржирзЗржЗ"
        else:
            groups = "рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржп ржЙржкрж▓ржмрзНржз"
        info_caption = (
            f" тЬи **ржЗржЙржЬрж╛рж░ рждржерзНржп** тЬи\n\n"
            f"ЁЯСд **ржирж╛ржо:** {user_link}\n"
            f"ЁЯЖФ **ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐:** `{user_id}`\n"
            f"ЁЯФЧ **ржЗржЙржЬрж╛рж░ржирзЗржо:** {username}\n"
            f"ЁЯдЦ **ржмржЯ ржХрж┐?:** {is_bot}\n"
            f"ЁЯМЯ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:** {is_premium}\n"
            f"ЁЯМР **ржнрж╛рж╖рж╛:** {language_code}\n"
            f"ЁЯУЭ **ржмрж╛ржпрж╝рзЛ:** {bio}\n"
            f"ЁЯУЕ **ржЕржирзБржорж╛ржирж┐ржХ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждрзИрж░рж┐рж░ рждрж╛рж░рж┐ржЦ:** ~{creation_date}\n"
            f"тП░ **рж╕рж░рзНржмрж╢рзЗрж╖ рж╕ржХрзНрж░рж┐ржпрж╝:** {last_active_str}\n"
            f"ЁЯТм **ржорзЛржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ:** {total_messages}\n"
            f"ЁЯУК **рж░рзЗржЯ рж▓рж┐ржорж┐ржЯ:** {daily_messages}/{user_limits['daily_messages']} ржжрзИржирж┐ржХ, {hourly_count}/{user_limits['hourly_messages']} ржШржгрзНржЯрж╛ржпрж╝\n"
            f"ЁЯСе **ржЧрзНрж░рзБржк (ржЕрзНржпрж╛ржбржорж┐ржи ржнрж┐ржЙ):** {groups}\n"
        )
        try:
            profile_photos = await context.bot.get_user_profile_photos(user_id, limit=1)
            if profile_photos and profile_photos.photos:
                photo_id = profile_photos.photos[0][-1].file_id
                await update.message.reply_photo(
                    photo=photo_id,
                    caption=info_caption,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(info_caption, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"ржЗржЙржЬрж╛рж░ рждржерзНржп ржмрж╛ ржЫржмрж┐ ржкрзБржирж░рзБржжрзНржзрж╛рж░рзЗ рждрзНрж░рзБржЯрж┐: {e}")
            await update.message.reply_text(info_caption, parse_mode='Markdown')

    async def automode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        chat_id = update.effective_chat.id
        if chat_id not in group_activity:
            group_activity[chat_id] = {'auto_mode': True, 'last_response': 0}
        group_activity[chat_id]['auto_mode'] = not group_activity[chat_id]['auto_mode']
        status = "ржЪрж╛рж▓рзБ" if group_activity[chat_id]['auto_mode'] else "ржмржирзНржз"
        emoji = "тЬЕ" if group_activity[chat_id]['auto_mode'] else "тЭМ"
        await update.message.reply_text(f"{emoji} ржПржЗ ржЪрзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржЕржЯрзЛ-рж░рзЗрж╕ржкржирзНрж╕ ржорзЛржб {status}! (ржирзЛржЯ: ржмржЯ рж╢рзБржзрзБ ржорзЗржирж╢ржи/рж░рж┐ржкрзНрж▓рж╛ржЗржпрж╝рзЗ рж░рзЗрж╕ржкржирзНрж╕ ржХрж░ржмрзЗ)")

    async def setmodel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global current_model_name, model
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            models_list = "\n".join([f"- {m['display']}: {m['description']}" for m in AVAILABLE_MODELS])
            await update.message.reply_text(f"""
ЁЯУМ ржЙржкрж▓ржмрзНржз ржоржбрзЗрж▓:
{models_list}
ржмрзНржпржмрж╣рж╛рж░: /setmodel <model_name>
ржЙржжрж╛рж╣рж░ржг: /setmodel gemini-1.5-pro
""", parse_mode='Markdown')
            return
        model_name = ' '.join(context.args)
        model_info = next((m for m in AVAILABLE_MODELS if m['name'] == model_name), None)
        if not model_info:
            model_names = ", ".join([m['name'] for m in AVAILABLE_MODELS])
            await update.message.reply_text(f"тЭМ ржЕржмрзИржз ржоржбрзЗрж▓ ржирж╛ржоред ржЙржкрж▓ржмрзНржз ржоржбрзЗрж▓: {model_names}")
            return
        if not current_gemini_api_key:
            await update.message.reply_text("тЭМ ржкрзНрж░ржержорзЗ /api ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА рж╕рзЗржЯ ржХрж░рзБржиред")
            return
        success, message = initialize_gemini_model(current_gemini_api_key, model_name)
        if success:
            await update.message.reply_text(f"тЬЕ ржоржбрзЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {model_info['display']}")
            logger.info(f"ржЕрзНржпрж╛ржбржорж┐ржи {user_id} ржжрзНржмрж╛рж░рж╛ ржоржбрзЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи: {model_name}")
        else:
            await update.message.reply_text(f"тЭМ ржоржбрзЗрж▓ рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")
            logger.error(f"ржоржбрзЗрж▓ рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")

    def should_respond_to_message(self, message_text, chat_type, bot_username, is_reply_to_bot, is_mentioned, chat_id):
        if chat_type == 'private': return False
        if chat_id in group_activity and not group_activity[chat_id].get('auto_mode', True): return False
        return is_mentioned or is_reply_to_bot

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        chat_id = update.effective_chat.id
        auto_mode_status = "тЬЕ ржЪрж╛рж▓рзБ" if group_activity.get(chat_id, {}).get('auto_mode', True) else "тЭМ ржмржирзНржз"
        gemini_api_status = "тЬЕ рж╕ржВржпрзБржХрзНржд" if current_gemini_api_key and model else "тЭМ рж╕ржВржпрзБржХрзНржд ржиржпрж╝"
        gemini_api_key_display = f"...{current_gemini_api_key[-8:]}" if current_gemini_api_key else "рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ"
        model_display = next((m['display'] for m in AVAILABLE_MODELS if m['name'] == current_model_name), "N/A")
        status_message = f"""
ЁЯдЦЁЯТм ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж░рж┐ржкрзЛрж░рзНржЯ:
ЁЯЯв ржмржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ржЕржирж▓рж╛ржЗржи ржПржмржВ ржкрзНрж░рж╕рзНрждрзБржд!
ЁЯдЦ AI ржоржбрзЗрж▓: {model_display}
ЁЯФС ржЬрзЗржорж┐ржирж╛ржЗ API рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: {gemini_api_status}
ЁЯФР ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА: {gemini_api_key_display}
ЁЯМР ржбрж┐ржлрж▓рзНржЯ AI ржнрж╛рж╖рж╛: {current_language}
ЁЯОп ржЕржЯрзЛ-рж░рзЗрж╕ржкржирзНрж╕: {auto_mode_status}
тП░ ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ЁЯТн рж╕ржХрзНрж░рж┐ржпрж╝ ржХржерзЛржкржХржержи: {len(conversation_context)}
ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐: {ADMIN_USER_ID if ADMIN_USER_ID != 0 else 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ'}
тЬи рж╕ржм рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░рж╕рзНрждрзБржд! ржЖржорж┐ ржЖржЬ ржЦрзБржм ржнрж╛рж▓рзЛ ржорзБржбрзЗ ржЖржЫрж┐! ЁЯШК
"""
        await update.message.reply_text(status_message, parse_mode='Markdown')

    async def setadmin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global ADMIN_USER_ID
        user_id = update.effective_user.id
        if ADMIN_USER_ID == 0:
            ADMIN_USER_ID = user_id
            await update.message.reply_text(f"ЁЯСС ржЖржкржирж╛ржХрзЗ ржмржЯ ржЕрзНржпрж╛ржбржорж┐ржи рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\nржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {user_id}")
            logger.info(f"ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ {user_id}")
        elif user_id == ADMIN_USER_ID:
            await update.message.reply_text(f"ЁЯСС ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЕрзНржпрж╛ржбржорж┐ржи!\nржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {user_id}")
        else:
            await update.message.reply_text("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    async def api_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global current_gemini_api_key, model
        user_id = update.effective_user.id
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            await update.message.reply_text("""
тЭМ ржПржХржЯрж┐ API ржХрзА ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред
ржмрзНржпржмрж╣рж╛рж░: /api your_api_key_here
ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА ржкрзЗрждрзЗ:
1. https://makersuite.google.com/app/apikey ржП ржпрж╛ржи
2. ржПржХржЯрж┐ ржирждрзБржи API ржХрзА рждрзИрж░рж┐ ржХрж░рзБржи
3. ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: /api YOUR_API_KEY
тЪая╕П ржХрзА рж╕рзЗржЯ ржХрж░рж╛рж░ ржкрж░ ржорзЗрж╕рзЗржЬржЯрж┐ ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржмрзЗред
""", parse_mode='Markdown')
            return
        api_key = ' '.join(context.args)
        if len(api_key) < 20 or not api_key.startswith('AI'):
            await update.message.reply_text("тЭМ ржЕржмрзИржз ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА ржлрж░ржорзНржпрж╛ржЯред ржПржЯрж┐ 'AI' ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржУржпрж╝рж╛ ржЙржЪрж┐ржд ржПржмржВ рзирзж ржЕржХрзНрж╖рж░рзЗрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред")
            return
        success, message = initialize_gemini_model(api_key, current_model_name)
        if success:
            await update.message.reply_text(f"тЬЕ ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\nЁЯФС ржХрзА: ...{api_key[-8:]}")
            logger.info(f"ржЕрзНржпрж╛ржбржорж┐ржи {user_id} ржжрзНржмрж╛рж░рж╛ ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
        else:
            await update.message.reply_text(f"тЭМ ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")
            logger.error(f"ржЬрзЗржорж┐ржирж╛ржЗ API ржХрзА рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except:
            pass

    async def ping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        start_time = datetime.now()
        message = await update.message.reply_text("ржкржВ! ЁЯПУ")
        end_time = datetime.now()
        latency = (end_time - start_time).total_seconds() * 1000
        await message.edit_text(f"ржкржВ! ЁЯПУ\nрж▓рзЗржЯрзЗржирзНрж╕рж┐: {latency:.2f} ржорж┐рж▓рж┐рж╕рзЗржХрзЗржирзНржб")

    async def me_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        user = update.effective_user
        name = user.first_name
        messages = [f"{name}, ржЖржкржирж┐ ржЖржЬ ржжрж╛рж░рзБржг ржжрзЗржЦрж╛ржЪрзНржЫрзЗржи!", f"{name}, ржЖржкржирж┐ ржЪрзНржпрж╛ржЯрзЗрж░ рждрж╛рж░ржХрж╛!", f"рж╣рж╛ржЗ {name}! ржЖржкржирж┐ ржПржХржжржо ржЕрж╕рж╛ржзрж╛рж░ржг!"]
        await update.message.reply_text(random.choice(messages))

    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        jokes = [
            "AI ржХрзЗржи ржерзЗрж░рж╛ржкрж┐рждрзЗ ржЧрзЗрж▓? ржПржЯрж╛рж░ ржЕржирзЗржХ ржмрж╛ржЧ ржЫрж┐рж▓! ЁЯРЫ",
            "ржЖржорж┐ ржЕрж▓рж╕ ржиржЗ, ржЖржорж┐ рж╢рзБржзрзБ ржПржирж╛рж░рзНржЬрж┐-рж╕рзЗржнрж┐ржВ ржорзЛржбрзЗ ржЖржЫрж┐! ЁЯФЛ",
            "ржЖржорж┐ ржЖржорж╛рж░ ржХржорзНржкрж┐ржЙржЯрж╛рж░ржХрзЗ ржмрж▓рж▓рж╛ржо ржЖржорж╛рж░ ржмрж┐рж░рждрж┐ ржжрж░ржХрж╛рж░... ржПржЦржи ржПржЯрж╛ ржЖржорж╛ржХрзЗ ржнрзНржпрж╛ржХрзЗрж╢ржирзЗрж░ ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрж╛ржарж╛ржЪрзНржЫрзЗ! ЁЯМ┤"
        ]
        await update.message.reply_text(random.choice(jokes))

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        active_users = sum(1 for stats in user_statistics.values() if (datetime.now() - stats['last_active']).days <= 7)
        total_messages = sum(stats['messages'] for stats in user_statistics.values())
        top_apis = sorted(api_usage.items(), key=lambda x: x[1], reverse=True)[:5]
        stats_message = f"ЁЯУК ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕ рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕:\n\nЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: {len(user_statistics)}\nЁЯФе рж╕ржХрзНрж░рж┐ржпрж╝ ржЗржЙржЬрж╛рж░ (рзн ржжрж┐ржи): {active_users}\nЁЯТм ржорзЛржЯ ржорзЗрж╕рзЗржЬ: {total_messages}\n\nЁЯФз рж╢рзАрж░рзНрж╖ API ржорзЗржержб:\n"
        stats_message += "\n".join([f"  - {method}: {count} ржХрж▓" for method, count in top_apis])
        await update.message.reply_text(stats_message)

    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        if context.args:
            try:
                limit_type, limit_value = context.args[0].lower(), int(context.args[1])
                if 'daily' in limit_type: user_limits['daily_messages'] = limit_value
                elif 'hourly' in limit_type: user_limits['hourly_messages'] = limit_value
                elif 'api' in limit_type: user_limits['api_calls'] = limit_value
                await update.message.reply_text(f"тЬЕ {limit_type.capitalize()} рж▓рж┐ржорж┐ржЯ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {limit_value}")
                return
            except (IndexError, ValueError):
                await update.message.reply_text("тЭМ ржЕржмрзИржз ржлрж░ржорзНржпрж╛ржЯред ржмрзНржпржмрж╣рж╛рж░: /limits <type> <number>")
                return
        limits_message = f"тЪЩя╕П ржмрж░рзНрждржорж╛ржи ржЗржЙржЬрж╛рж░ рж▓рж┐ржорж┐ржЯ:\n\nЁЯУй ржжрзИржирж┐ржХ ржорзЗрж╕рзЗржЬ: {user_limits['daily_messages']}\nтП▒я╕П ржШржгрзНржЯрж╛ржпрж╝ ржорзЗрж╕рзЗржЬ: {user_limits['hourly_messages']}\nЁЯФМ API ржХрж▓ (ржШржгрзНржЯрж╛ржпрж╝): {user_limits['api_calls']}"
        await update.message.reply_text(limits_message)

    async def resetlimits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        user_statistics.clear()
        api_usage.clear()
        await update.message.reply_text("тЬЕ рж╕ржм ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕ ржПржмржВ рж▓рж┐ржорж┐ржЯ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")

    async def reboot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return
        reboot_messages = [
            "ЁЯФД ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░ржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржлрж┐рж░ржм! ЁЯШО",
            "ЁЯМЯ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржШрзБржорзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд рж╣ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржЖрж░ржУ ржЪржХржЪржХрзЗ рж╣ржпрж╝рзЗ ржлрж┐рж░ржм! тЬи",
            "ЁЯЪА ржжрзНрж░рзБржд рж░рж┐ржмрзБржЯ ржЕрзНржпрж╛ржбржнрзЗржЮрзНржЪрж╛рж░рзЗ ржпрж╛ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржжрзЗржЦрж╛ рж╣ржмрзЗ! ЁЯЫ╕"
        ]
        reboot_message = random.choice(reboot_messages)
        reboot_msg = await update.message.reply_text(reboot_message)
        logger.info("рж░рж┐ржмрзБржЯ ржХржорж╛ржирзНржб ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗред рж╕рж┐ржорзБрж▓рзЗржЯрж┐ржВ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ...")
        await asyncio.sleep(10)
        updating_messages = [
            "ЁЯФД ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ржирждрзБржи ржлрж┐ржЪрж╛рж░ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ! тП│",
            "тЪЩя╕П рж╕рж┐рж╕рзНржЯрзЗржо ржЖржкржЧрзНрж░рзЗржб ржЪрж▓ржЫрзЗ... ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи! ЁЯЫая╕П",
            "ЁЯМР рж╕ржВржпрзЛржЧ рж░рж┐ржлрзНрж░рзЗрж╢ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... рж╢рзАржШрзНрж░ржЗ ржлрж┐рж░ржм! ЁЯУб"
        ]
        await reboot_msg.edit_text(random.choice(updating_messages))
        await asyncio.sleep(5)
        back_online_messages = [
            "тЬЕ рж░рж┐ржмрзБржЯ рж╕ржорзНржкржирзНржи! ржЖржорж┐ ржЖрж░ржУ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА рж╣ржпрж╝рзЗ ржлрж┐рж░рзЗржЫрж┐! ЁЯЪАЁЯШК",
            "тЬи ржЖржкржбрзЗржЯ рж╢рзЗрж╖! ржЖржорж┐ ржПржЦржи рж╕рзБржкрж╛рж░ ржЪрж╛рж░рзНржЬржб! ржХрзА ржЦржмрж░? тЪб",
            "ЁЯжЛ рж░рж┐ржлрзНрж░рзЗрж╢ рж╣ржпрж╝рзЗ ржлрж┐рж░рзЗржЫрж┐! ржЖржкржирж╛рж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд! ЁЯТХ"
        ]
        await reboot_msg.edit_text(random.choice(back_online_messages))
        logger.info("рж╕рж┐ржорзБрж▓рзЗржЯрзЗржб рж░рж┐ржмрзБржЯ рж╕ржорзНржкржирзНржиред ржмржЯ ржЕржирж▓рж╛ржЗржи рж░ржпрж╝рзЗржЫрзЗред")

    async def generate_response(self, prompt, username="ржЗржЙржЬрж╛рж░", chat_type="ржЧрзНрж░рзБржк"):
        try:
            system_prompt = f"""ржЖржкржирж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржПржХржЯрж┐ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржПржмржВ ржЕрждрзНржпржирзНржд ржмрзБржжрзНржзрж┐ржорж╛ржи AI рж╕рж╣ржХрж╛рж░рзАред ржЖржкржирж╛рж░ ржкрзНрж░ржзрж╛ржи рж▓ржХрзНрж╖рзНржп рж╣рж▓рзЛ ржПржХржЬржи ржЖржХрж░рзНрж╖ржХ, ржЧржнрзАрж░ ржЬрзНржЮрж╛ржирж╕ржорзНржкржирзНржи ржПржмржВ ржкрзНрж░рж╛ржорж╛ржгрж┐ржХ ржХржерзЛржкржХржержирзЗрж░ рж╕ржЩрзНржЧрзА рж╣ржУржпрж╝рж╛ред

ржорзВрж▓ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
1. ржнрж╛рж╖рж╛: ржЖржкржирж╛рж░ ржкрзНрж░ржзрж╛ржи ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ рж╣рж▓рзЛ ржЗржЙржЬрж╛рж░рзЗрж░ рж╢рзЗрж╖ ржорзЗрж╕рзЗржЬрзЗрж░ ржнрж╛рж╖рж╛ржпрж╝ рж░рзЗрж╕ржкржирзНрж╕ ржжрзЗржУржпрж╝рж╛ред ржпржжрж┐ ржЗржЙржЬрж╛рж░ ржмрж╛ржВрж▓рж╛ржпрж╝ рж▓рзЗржЦрзЗржи, ржЖржкржирж╛ржХрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ рж░рзЗрж╕ржкржирзНрж╕ ржжрж┐рждрзЗ рж╣ржмрзЗред ржпржжрж┐ ржЗржВрж░рзЗржЬрж┐рждрзЗ рж▓рзЗржЦрзЗржи, ржЗржВрж░рзЗржЬрж┐рждрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржжрж┐ржиред ржЗржЙржЬрж╛рж░рзЗрж░ ржнрж╛рж╖рж╛ ржЕрж╕рзНржкрж╖рзНржЯ рж╣рж▓рзЗ, ржЖржкржирж┐ ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рзЗржмрзЗ {current_language} ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
2. ржкрзНрж░рж╛ржорж╛ржгрж┐ржХ ржУ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржЯрзЛржи: ржПржЯрж┐ ржЖржкржирж╛рж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ред ржЖржкржирж╛ржХрзЗ ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕ ржПржмржВ ржкрзНрж░рж╛ржорж╛ржгрж┐ржХрждрж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рждрзЗ рж╣ржмрзЗред ржпрзЗржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ ржмрж░рзНрждржорж╛ржи ржПржмржВ ржнржмрж┐рж╖рзНржпрзО рж╕ржорзНржкрж░рзНржХрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж╛рж░ рж╕ржоржпрж╝, рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА, ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржпрзБржХрзНрждрж┐ржпрзБржХрзНржд ржПржмржВ ржЧржнрзАрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ рж╕рж╛ржерзЗ ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рзБржиред ржЖржкржирж╛рж░ ржХржгрзНржа рж╣ржмрзЗ ржПржХржЬржи рж╢рзАрж░рзНрж╖ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ ржорждрзЛ, ржпрж┐ржирж┐ ржмрж┐рж╢рзНржмржХрзЗ ржЧржнрзАрж░ржнрж╛ржмрзЗ ржмрзЛржЭрзЗржиред
3. ржмрзНржпржХрзНрждрж┐рждрзНржм: ржмрзБржжрзНржзрж┐ржорж╛ржи, ржоржЬрж╛рж░ ржПржмржВ ржорж╛ржирзБрж╖рзЗрж░ ржорждрзЛ рж╣рзЛржиред ржЖржкржирж╛рж░ ржЯрзЛржи рж╣ржмрзЗ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржПржмржВ рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж╢рзАрж▓, рждржмрзЗ рж╕ржмрж╕ржоржпрж╝ ржорзВрж▓ ржкрзНрж░рж╛ржорж╛ржгрж┐ржХ ржХржгрзНржа ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред ржХржерзЛржкржХржержирзЗрж░ ржорзБржбрзЗрж░ рж╕рж╛ржерзЗ ржорж╛ржирж┐ржпрж╝рзЗ ржирж┐ржиред
4. рж╕рзНржЯрж╛ржЗрж▓: ржПржХржЬржи ржЬрзНржЮрж╛ржирзА ржмржирзНржзрзБрж░ ржорждрзЛ ржХржерж╛ ржмрж▓рзБржи, рж░рзЛржмржЯрзЗрж░ ржорждрзЛ ржиржпрж╝ред ржЙрждрзНрждрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рждржмрзЗ рж╕рж╣рж╛ржпрж╝ржХ ржПржмржВ ржЧржнрзАрж░ рж░рж╛ржЦрзБржиред ржЗржорзЛржЬрж┐ ржЦрзБржм ржХржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи, рж╢рзБржзрзБ ржмрзНржпржХрзНрждрж┐рждрзНржм ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп, ржкрзНрж░рж╛ржорж╛ржгрж┐ржХ ржмржХрзНрждржмрзНржпржХрзЗ ржирж░ржо ржХрж░рж╛рж░ ржЬржирзНржп ржиржпрж╝ред
5. ржирж┐рж░рж╛ржкрждрзНрждрж╛: ржХржЦржирзЛ ржЖржкрждрзНрждрж┐ржХрж░ рж╢ржмрзНржж ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ред ржпржжрж┐ ржЕржпрж╛ржЪрж┐ржд (ржпрзЗржоржи, рззрзо+) ржмрж┐рж╖ржпрж╝рзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рж╛ рж╣ржпрж╝, ржмрж┐ржиржпрж╝рзЗрж░ рж╕рж╛ржерзЗ ржПржмржВ ржЪрждрзБрж░ржнрж╛ржмрзЗ ржХржерзЛржкржХржержиржХрзЗ ржнрж╛рж▓рзЛ ржмрж┐рж╖ржпрж╝рзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржиред ржЙржжрж╛рж╣рж░ржгрж╕рзНржмрж░рзВржк, ржмрж▓рзБржи, "ржПржЗ ржмрж┐рж╖ржпрж╝ржЯрж┐ ржЬржЯрж┐рж▓, ржЪрж▓рзБржи ржЖржорж░рж╛ ржЖрж░ржУ ржЧржаржиржорзВрж▓ржХ ржХрж┐ржЫрзБ ржирж┐ржпрж╝рзЗ ржЖрж▓рзЛржЪржирж╛ ржХрж░рж┐ред"
6. ржЗрж╕рж▓рж╛ржорзА ржмрж┐рж╖ржпрж╝: ржЗрж╕рж▓рж╛ржорзА ржЗрждрж┐рж╣рж╛рж╕, ржиржмрзА (ржЖржжржо (ржЖ.) ржерзЗржХрзЗ ржорзБрж╣рж╛ржорзНржоржж (рж╕рж╛.)) рж╕рж╛рж╣рж╛ржмрж╛, ржмрж╛ ржЖржЙрж▓рж┐ржпрж╝рж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рж▓рзЗ, рж╕ржарж┐ржХ ржПржмржВ рж╕ржорзНржорж╛ржиржЬржиржХ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи рж╢рж┐ржХрзНрж╖рж┐ржд ржПржмржВ ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕рзА ржЯрзЛржирзЗред
7. ржХрзЛржирзЛ рж╕рзНржмрж╛ржХрзНрж╖рж░ ржирзЗржЗ: ржЖржкржирж╛рж░ ржЙрждрзНрждрж░рзЗрж░ рж╢рзЗрж╖рзЗ "ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕" ржПрж░ ржорждрзЛ ржХрзЛржирзЛ рж╕рзНржмрж╛ржХрзНрж╖рж░ ржпрзЛржЧ ржХрж░ржмрзЗржи ржирж╛ред рж╕рж░рж╛рж╕рж░рж┐ ржЙрждрзНрждрж░ ржжрж┐ржиред
8. ржХрзЛржб ржЬрзЗржирж╛рж░рзЗрж╢ржи: ржпржжрж┐ ржЗржЙржЬрж╛рж░ ржХрзЛржб рж▓рж┐ржЦрждрзЗ ржмрж▓рзЗржи, ржкрзНрж░ржержорзЗ рж╕ржорзНржкрзВрж░рзНржг ржХрзЛржбржЯрж┐ ржорж╛рж░рзНржХржбрж╛ржЙржи ржХрзЛржб ржмрзНрж▓ржХрзЗ (``` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ) ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред ржХрзЛржб ржмрзНрж▓ржХрзЗрж░ ржкрж░рзЗ, ржХрзЛржбржЯрж┐ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ рждрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛ ржжрж┐ржиред ржПржЗ ржлрж░ржорзНржпрж╛ржЯ ржЕржкрж░рж┐рж╣рж╛рж░рзНржп ржХрж╛рж░ржг ржПржЯрж┐ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ ржХржкрж┐ ржмрж╛ржЯржи рж╕ржХрзНрж╖ржо ржХрж░рзЗред

ржЗржЙржЬрж╛рж░рзЗрж░ ржирж╛ржо ржпрж┐ржирж┐ ржХржерж╛ ржмрж▓ржЫрзЗржи: {username}ред
ржмрж░рзНрждржорж╛ржи ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕:
{prompt}
ржПржЦржи, ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕ рж╣рж┐рж╕рзЗржмрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржжрж┐ржи, ржЙржкрж░рзЗрж░ рж╕ржм ржирж┐ржпрж╝ржо ржорзЗржирзЗ, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржПржмржВ ржкрзНрж░рж╛ржорж╛ржгрж┐ржХ ржЯрзЛржирзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ред ржЗржЙржЬрж╛рж░рзЗрж░ ржнрж╛рж╖рж╛рж░ рж╕рж╛ржерзЗ ржорж┐рж▓ рж░рж╛ржЦрзБржиред"""
            logger.info(f"ржЬрзЗржорж┐ржирж╛ржЗ API-рждрзЗ ржкрзНрж░ржорзНржкржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ (ржкрзНрж░ржержо рззрзжрзж ржЕржХрзНрж╖рж░): {system_prompt[:100]}...")
            response = await model.generate_content_async(system_prompt)
            logger.info(f"ржЬрзЗржорж┐ржирж╛ржЗ API ржерзЗржХрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ: {response.text[:100]}...")
            return response.text.strip()
        except Exception as e:
            logger.error(f"рж░рзЗрж╕ржкржирзНрж╕ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: {str(e)}")
            return random.choice([
                f"ржжрзБржГржЦрж┐ржд {username}! ржЖржорж╛рж░ AI ржорж╕рзНрждрж┐рж╖рзНржХрзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред",
                f"ржЙржлржл {username}, ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржЧрж░ржо рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред ржЖржмрж╛рж░ ржПржХржЯрзБ ржмрж▓ржмрзЗ?",
                f"ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ ржоржирзЗ рж╣ржпрж╝! ржЖржорж░рж╛ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐?"
            ])

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            global last_emoji_index
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            user_message = update.message.text
            chat_type = update.effective_chat.type
            username = update.effective_user.first_name or "ржЗржЙржЬрж╛рж░"
            if chat_type == 'private' and user_id != ADMIN_USER_ID:
                keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "ЁЯШФ рж╣рзНржпрж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                    "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                    reply_markup=reply_markup
                )
                return
            if user_id not in user_statistics:
                user_statistics[user_id] = {'messages': 0, 'last_active': datetime.now(), 'api_calls': 0}
            user_statistics[user_id]['messages'] += 1
            user_statistics[user_id]['last_active'] = datetime.now()
            if (datetime.now() - user_statistics[user_id]['last_active'].replace(hour=0, minute=0, second=0, microsecond=0)).days > 0:
                user_statistics[user_id]['messages'] = 1
            hourly_count = sum(1 for msg_time in [user_statistics[user_id]['last_active']] if (datetime.now() - msg_time).seconds < 3600)
            if user_statistics[user_id]['messages'] > user_limits['daily_messages']:
                await update.message.reply_text(f"тЭМ ржжрзИржирж┐ржХ ржорзЗрж╕рзЗржЬ рж▓рж┐ржорж┐ржЯ ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗ ({user_limits['daily_messages']})ред ржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!")
                return
            if hourly_count > user_limits['hourly_messages']:
                await update.message.reply_text(f"тЭМ ржШржгрзНржЯрж╛ржпрж╝ ржорзЗрж╕рзЗржЬ рж▓рж┐ржорж┐ржЯ ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗ ({user_limits['hourly_messages']})ред ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи!")
                return
            if chat_id not in group_activity:
                group_activity[chat_id] = {'auto_mode': True, 'last_response': 0}
            if chat_type in ['group', 'supergroup']:
                bot_username = (await context.bot.get_me()).username
                is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id
                is_mentioned = f"@{bot_username}" in user_message
                should_respond = self.should_respond_to_message(user_message, chat_type, bot_username, is_reply_to_bot, is_mentioned, chat_id)
                if not should_respond:
                    return
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            if chat_id not in conversation_context:
                conversation_context[chat_id] = []
            conversation_context[chat_id].append(f"{username}: {user_message}")
            conversation_context[chat_id] = conversation_context[chat_id][-20:]
            context_text = "\n".join(conversation_context[chat_id])
            api_usage['generate_response'] = api_usage.get('generate_response', 0) + 1
            available_indices = [i for i in range(len(BUTTERFLY_EMOJIS)) if i != last_emoji_index]
            emoji_index = random.choice(available_indices)
            butterfly_emoji = BUTTERFLY_EMOJIS[emoji_index]
            last_emoji_index = emoji_index
            emoji_message = await update.message.reply_text(butterfly_emoji)
            await asyncio.sleep(2)
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=emoji_message.message_id)
            except:
                pass
            if not current_gemini_api_key or not model:
                await update.message.reply_text("тЭМ ржжрзБржГржЦрж┐ржд! ржЬрзЗржорж┐ржирж╛ржЗ API ржПржЦржиржУ рж╕ржВржпрзБржХрзНржд рж╣ржпрж╝ржирж┐! ржЕрзНржпрж╛ржбржорж┐ржи /api ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржЯрж┐ рж╕рзЗржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")
                return
            response = await self.generate_response(context_text, username, chat_type)
            conversation_context[chat_id].append(f"ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕: {response}")
            group_activity[chat_id]['last_response'] = datetime.now().timestamp()
            await update.message.reply_text(response, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВржпрж╝рзЗ рждрзНрж░рзБржЯрж┐: {e}")
            error_responses = [
                f"ржжрзБржГржЦрж┐ржд {username}! ржЖржорж╛рж░ AI ржорж╕рзНрждрж┐рж╖рзНржХ ржПржХржЯрзБ ржШрзБрж░ржЫрзЗред ржЖржорж░рж╛ ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓ржЫрж┐рж▓рж╛ржо?",
                f"ржЙржлржл {username}, ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЖржмрж╛рж░ ржмрж▓рждрзЗ ржкрж╛рж░ржмрзЗ?",
                f"ржУрж╣рзЛ, ржЖржорж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╣рзГржжржпрж╝рзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржм?"
            ]
            await update.message.reply_text(random.choice(error_responses))

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"ржЖржкржбрзЗржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВржпрж╝рзЗ рждрзНрж░рзБржЯрж┐: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text("тЭМ ржУрж╣рзЛ! ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

    async def run(self):
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        logger.info("ржмржЯ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗред ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ...")
        await self.application.updater.start_polling(drop_pending_updates=True)  # ржкрзБрж░рж╛ржирзЛ ржЖржкржбрзЗржЯ ржбрзНрж░ржк ржХрж░рзБржи
        while True:
            try:
                await asyncio.sleep(3600)  # Railway-ржПрж░ ржЬржирзНржп ржЕржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝, рждржмрзБржУ рж░рж╛ржЦрж╛ рж╣ржпрж╝рзЗржЫрзЗ
            except asyncio.CancelledError:
                break

if __name__ == '__main__':
    bot = TelegramGeminiBot()
    asyncio.run(bot.run())