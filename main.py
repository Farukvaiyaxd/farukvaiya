import os
import logging
import google.generativeai as genai
from telegram import Update, User, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from datetime import datetime
import random
import re
import pytz
import sys
import subprocess
import time

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8380869007:AAFop4k07N5Sc1AaD3vFbrudyh3iiHTdvto')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '7835226724'))
PORT = int(os.getenv('PORT', 8000))

# Global variables
current_gemini_api_key = GEMINI_API_KEY
model = None
current_model_name = 'gemini-1.5-flash'
custom_welcome_message = None
current_language = 'Bengali'
last_emoji_index = -1

# Available Gemini models
AVAILABLE_MODELS = [
    {'name': 'gemini-2.5-flash', 'display': 'Gemini 2.5 Flash', 'description': 'ЁЯЪА Latest & most advanced - Best overall performance'},
    {'name': 'gemini-2.5-flash-lite', 'display': 'Gemini 2.5 Flash Lite', 'description': 'тЪб Ultra-fast responses - Lower cost, great speed'},
    {'name': 'gemini-1.5-flash-8b', 'display': 'Gemini 1.5 Flash 8B', 'description': 'ЁЯТл Compact & efficient - Good balance of speed/quality'},
    {'name': 'gemini-1.5-flash', 'display': 'Gemini 1.5 Flash', 'description': 'ЁЯОп Stable & reliable - Proven performance'},
    {'name': 'gemini-2.5-pro', 'display': 'Gemini 2.5 Pro', 'description': 'ЁЯза Most intelligent & capable - Best for complex tasks'}
]

# Butterfly emojis
BUTTERFLY_EMOJIS = ["ЁЯжЛ", "ЁЯжЛтЬи", "ЁЯжЛЁЯМЯ", "ЁЯжЛЁЯТл"]

# Statistics tracking
user_statistics = {}
api_usage = {}
user_limits = {'daily_messages': 100, 'hourly_messages': 20, 'api_calls': 50}

# Store chat_id for restart confirmation
restart_chat_id = None

def initialize_gemini_model(api_key, model_name='gemini-1.5-flash'):
    global model, current_gemini_api_key, current_model_name
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(model_name)
        current_gemini_api_key = api_key
        current_model_name = model_name
        return True, f"тЬЕ Gemini API configured successfully with model {model_name}!"
    except Exception as e:
        return False, f"тЭМ Error configuring Gemini API: {str(e)}"

if GEMINI_API_KEY:
    success, message = initialize_gemini_model(GEMINI_API_KEY)
    if success:
        logger.info("Gemini API initialized from environment variable")
    else:
        logger.error(f"Failed to initialize Gemini API: {message}")
else:
    logger.warning("GEMINI_API_KEY not set. Use /api command to configure.")

conversation_context = {}
group_activity = {}

class TelegramGeminiBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("api", self.api_command))
        self.application.add_handler(CommandHandler("setadmin", self.setadmin_command))
        self.application.add_handler(CommandHandler("automode", self.automode_command))
        self.application.add_handler(CommandHandler("setwelcome", self.setwelcome_command))
        self.application.add_handler(CommandHandler("setmodel", self.setmodel_command))
        self.application.add_handler(CommandHandler("setlanguage", self.setlanguage_command))
        self.application.add_handler(CommandHandler("ping", self.ping_command))
        self.application.add_handler(CommandHandler("me", self.me_command))
        self.application.add_handler(CommandHandler("joke", self.joke_command))
        self.application.add_handler(CommandHandler("time", self.time_command))
        self.application.add_handler(CommandHandler("info", self.info_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("limits", self.limits_command))
        self.application.add_handler(CommandHandler("resetlimits", self.resetlimits_command))
        self.application.add_handler(CommandHandler("reboot", self.reboot_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if custom_welcome_message:
            await update.message.reply_text(custom_welcome_message, parse_mode='Markdown')
            return
        default_welcome_message = """
ЁЯдЦЁЯТм рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЖржкржирж╛рж░ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржПржЖржЗ рж╕рж╣ржХрж╛рж░рзА!
ржЧрзБржЧрж▓рзЗрж░ ржЬрзЗржорж┐ржирж┐ ржПржЖржЗ ржжрзНржмрж╛рж░рж╛ ржЪрж╛рж▓рж┐ржд, ржЖржорж┐ ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! ЁЯШК
ржХржорж╛ржирзНржбрж╕ржорзВрж╣:
/start - ржПржЗ рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржи
/help - рж╕рж╛рж╣рж╛ржпрзНржп ржПржмржВ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рждржерзНржп ржкрж╛ржи
/clear - ржЧрзНрж░рзБржк ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзБржи
/status - ржЖржорж╛рж░ рж╕рзНржерж┐рждрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
/api <key> - ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setwelcome <message> - ржХрж╛рж╕рзНржЯржо рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setadmin - ржирж┐ржЬрзЗржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рзБржи (ржкрзНрж░ржержоржмрж╛рж░рзЗрж░ ржЬржирзНржп)
/automode - ржЧрзНрж░рзБржкрзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржЯржЧрж▓ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setmodel <model> - ржЬрзЗржорж┐ржирж┐ ржоржбрзЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setlanguage <language> - ржПржЖржЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/ping - ржмржЯрзЗрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ рж╕ржоржпрж╝ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
/me - ржирж┐ржЬрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ ржоржЬрж╛рж░ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржи
/joke - ржПржХржЯрж┐ ржХрзМрждрзБржХ рж╢рзБржирзБржи
/time - ржмрж░рзНрждржорж╛ржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕ржоржпрж╝ ржжрзЗржЦрзБржи
/info - ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржи
/stats - ржмржЯрзЗрж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/limits - ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕рзАржорж╛ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/resetlimits - рж╕ржм ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/reboot - рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржоржЬрж╛рж░ ржЯрзБржЗрж╕рзНржЯ рж╕рж╣ ржмржЯ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
ржЖржорж┐ рж╢рзБржзрзБ ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржжрж┐ржЗ! ржЖржорж╛ржХрзЗ ржорзЗржирж╢ржи ржХрж░рзБржи (@BotUsername) ржмрж╛ ржЖржорж╛рж░ ржмрж╛рж░рзНрждрж╛рж░ ржЙрждрзНрждрж░ ржжрж┐ржи! ЁЯТХтЬи
        """
        await update.message.reply_text(default_welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        help_message = """
ЁЯЖШЁЯТм рж╕рж╛рж╣рж╛ржпрзНржп ржПржмржВ ржХржорж╛ржирзНржбрж╕ржорзВрж╣:
/start - рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржи
/help - ржПржЗ рж╕рж╛рж╣рж╛ржпрзНржп ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржи
/clear - ржЧрзНрж░рзБржк ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзБржи
/status - ржЖржорж┐ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрж┐ ржХрж┐ржирж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
/api <key> - ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setwelcome <message> - ржХрж╛рж╕рзНржЯржо рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setadmin - ржирж┐ржЬрзЗржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рзБржи (ржкрзНрж░ржержоржмрж╛рж░рзЗрж░ ржЬржирзНржп)
/automode - ржЧрзНрж░рзБржкрзЗ рж╕рзНржмуВИржВржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржЯржЧрж▓ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setmodel <model> - ржЬрзЗржорж┐ржирж┐ ржоржбрзЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/setlanguage <language> - ржПржЖржЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/ping - ржмржЯрзЗрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ рж╕ржоржпрж╝ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
/me - ржирж┐ржЬрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ ржоржЬрж╛рж░ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржи
/joke - ржПржХржЯрж┐ ржХрзМрждрзБржХ рж╢рзБржирзБржи
/time - ржмрж░рзНрждржорж╛ржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕ржоржпрж╝ ржжрзЗржЦрзБржи
/info - ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп ржкрж╛ржи (ржХрж╛рж░рзЛ ржмрж╛рж░рзНрждрж╛рж░ ржЙрждрзНрждрж░ ржжрж┐ржпрж╝рзЗ рждрж╛ржжрзЗрж░ рждржерзНржп ржкрж╛ржи)
/stats - ржмржЯрзЗрж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/limits - ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕рзАржорж╛ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/resetlimits - рж╕ржм ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
/reboot - рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржоржЬрж╛рж░ ржЯрзБржЗрж╕рзНржЯ рж╕рж╣ ржмржЯ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рзБржи (рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи)
ЁЯТм ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рж┐:
- ржЖржорж┐ рж╢рзБржзрзБ ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржжрж┐ржЗ (ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ ржЫрж╛ржбрж╝рж╛)!
- ржЧрзНрж░рзБржкрзЗ ржЖржорж╛ржХрзЗ ржорзЗржирж╢ржи ржХрж░рзБржи (@BotUsername) ржмрж╛ ржЖржорж╛рж░ ржмрж╛рж░рзНрждрж╛рж░ ржЙрждрзНрждрж░ ржжрж┐ржиред
- ржЖржорж┐ /clear ржХржорж╛ржирзНржб ржирж╛ ржжрзЗржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд ржЧрзНрж░рзБржк ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржоржирзЗ рж░рж╛ржЦрж┐ред
- ржЖржорж╛рж░ ржПржЖржЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝, рждржмрзЗ ржЖржкржирж┐ /setlanguage ржжрж┐ржпрж╝рзЗ ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
- ржЖржорж┐ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг, ржоржЬрж╛рж░ ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрж┐!
тЪб ржЧрзБржЧрж▓ ржЬрзЗржорж┐ржирж┐ ржПржЖржЗ ржжрзНржмрж╛рж░рж╛ ржЪрж╛рж▓рж┐ржд ЁЯТХ
        """
        await update.message.reply_text(help_message)

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        chat_id = update.effective_chat.id
        if chat_id in conversation_context:
            del conversation_context[chat_id]
        await update.message.reply_text("ЁЯз╣ ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржирждрзБржи рж╢рзБрж░рзБрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБрждред")

    async def setwelcome_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global custom_welcome_message
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            await update.message.reply_text("ЁЯУЭ ржжржпрж╝рж╛ ржХрж░рзЗ ржХржорж╛ржирзНржбрзЗрж░ ржкрж░рзЗ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржжрж┐ржиред\nржЙржжрж╛рж╣рж░ржг: `/setwelcome рж╕ржмрж╛ржЗржХрзЗ рж╕рзНржмрж╛ржЧрждржо!`")
            return
        new_message = ' '.join(context.args)
        custom_welcome_message = new_message
        await update.message.reply_text(f"тЬЕ ржХрж╛рж╕рзНржЯржо рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n**ржирждрзБржи ржмрж╛рж░рзНрждрж╛:**\n{new_message}", parse_mode='Markdown')

    async def setlanguage_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global current_language
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            await update.message.reply_text("ЁЯУЭ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржнрж╛рж╖рж╛рж░ ржирж╛ржо ржжрж┐ржиред\nржЙржжрж╛рж╣рж░ржг: `/setlanguage English` ржмрж╛ `/setlanguage Bengali`")
            return
        new_language = ' '.join(context.args).capitalize()
        current_language = new_language
        await update.message.reply_text(f"тЬЕ ржПржЖржЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {new_language}")

    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        bd_timezone = pytz.timezone("Asia/Dhaka")
        bd_time = datetime.now(bd_timezone)
        time_str = bd_time.strftime('%Y-%m-%d %H:%M:%S')
        await update.message.reply_text(f"тП░ ржмрж░рзНрждржорж╛ржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕ржоржпрж╝: {time_str}")

    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        target_user = update.message.reply_to_message.from_user if update.message.reply_to_message else update.effective_user
        if not target_user:
            await update.message.reply_text("тЭМ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            return
        user_id = target_user.id
        first_name = target_user.first_name
        last_name = f" {target_user.last_name}" if target_user.last_name else ""
        full_name = f"{first_name}{last_name}"
        username = f"@{target_user.username}" if target_user.username else "рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝ржирж┐"
        is_bot = "рж╣рзНржпрж╛ржБ ЁЯдЦ" if target_user.is_bot else "ржирж╛ ЁЯСд"
        user_link = f"[{full_name}](tg://user?id={user_id})"
        info_caption = (
            f" тЬи **ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рждржерзНржп** тЬи\n\n"
            f"ЁЯСд **ржирж╛ржо:** {user_link}\n"
            f"ЁЯЖФ **ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЖржЗржбрж┐:** `{user_id}`\n"
            f"ЁЯФЧ **ржЗржЙржЬрж╛рж░ржирзЗржо:** {username}\n"
            f"ЁЯдЦ **ржмржЯ ржХрж┐ржирж╛?:** {is_bot}\n"
        )
        try:
            profile_photos = await context.bot.get_user_profile_photos(user_id, limit=1)
            if profile_photos and profile_photos.photos:
                photo_id = profile_photos.photos[0][-1].file_id
                await update.message.reply_photo(
                    photo=photo_id,
                    caption=info_caption,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(info_caption, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рждржерзНржп ржмрж╛ ржЫржмрж┐ ржкрзЗрждрзЗ рждрзНрж░рзБржЯрж┐: {e}")
            await update.message.reply_text(info_caption, parse_mode='Markdown')

    async def automode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        chat_id = update.effective_chat.id
        if chat_id not in group_activity:
            group_activity[chat_id] = {'auto_mode': True, 'last_response': 0}
        group_activity[chat_id]['auto_mode'] = not group_activity[chat_id]['auto_mode']
        status = "ржЪрж╛рж▓рзБ" if group_activity[chat_id]['auto_mode'] else "ржмржирзНржз"
        emoji = "тЬЕ" if group_activity[chat_id]['auto_mode'] else "тЭМ"
        await update.message.reply_text(f"{emoji} ржПржЗ ржЪрзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржорзЛржб {status}! (ржжрзНрж░рж╖рзНржЯржмрзНржп: ржмржЯ рж╢рзБржзрзБ ржорзЗржирж╢ржи/ржЙрждрзНрждрж░рзЗ рж╕рж╛ржбрж╝рж╛ ржжрзЗржмрзЗ)")

    async def setmodel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global current_model_name, model
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            models_list = "\n".join([f"- {m['display']}: {m['description']}" for m in AVAILABLE_MODELS])
            await update.message.reply_text(f"""
ЁЯУМ ржЙржкрж▓ржмрзНржз ржЬрзЗржорж┐ржирж┐ ржоржбрзЗрж▓рж╕ржорзВрж╣:
{models_list}
ржмрзНржпржмрж╣рж╛рж░: `/setmodel <model_name>`
ржЙржжрж╛рж╣рж░ржг: `/setmodel gemini-2.5-flash`
            """, parse_mode='Markdown')
            return
        model_name = ' '.join(context.args)
        model_exists = any(m['name'] == model_name for m in AVAILABLE_MODELS)
        if not model_exists:
            model_names = ", ".join([m['name'] for m in AVAILABLE_MODELS])
            await update.message.reply_text(f"тЭМ ржЕржмрзИржз ржоржбрзЗрж▓ ржирж╛ржоред ржЙржкрж▓ржмрзНржз ржоржбрзЗрж▓: {model_names}")
            return
        if not current_gemini_api_key:
            await update.message.reply_text("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзНрж░ржержорзЗ /api ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рзБржиред")
            return
        success, message = initialize_gemini_model(current_gemini_api_key, model_name)
        if success:
            model_display = next(m['display'] for m in AVAILABLE_MODELS if m['name'] == model_name)
            await update.message.reply_text(f"тЬЕ ржоржбрзЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {model_display}")
            logger.info(f"ржоржбрзЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {model_name} by admin {user_id}")
        else:
            await update.message.reply_text(f"тЭМ ржоржбрзЗрж▓ рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")
            logger.error(f"ржоржбрзЗрж▓ рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")

    def should_respond_to_message(self, message_text, chat_type, bot_username, is_reply_to_bot, is_mentioned):
        if chat_type == 'private': return False
        chat_id = hash(message_text)
        if chat_id in group_activity and not group_activity[chat_id].get('auto_mode', True): return False
        return is_mentioned or is_reply_to_bot

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        chat_id = update.effective_chat.id
        auto_mode_status = "тЬЕ ржЪрж╛рж▓рзБ" if group_activity.get(chat_id, {}).get('auto_mode', True) else "тЭМ ржмржирзНржз"
        api_status = "тЬЕ рж╕ржВржпрзБржХрзНржд" if current_gemini_api_key and model else "тЭМ рж╕ржВржпрзБржХрзНржд ржиржпрж╝"
        api_key_display = f"...{current_gemini_api_key[-8:]}" if current_gemini_api_key else "рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝ржирж┐"
        model_display = next((m['display'] for m in AVAILABLE_MODELS if m['name'] == current_model_name), "N/A") if model else "N/A"
        status_message = f"""
ЁЯдЦЁЯТм ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕ рж╕рзНржерж┐рждрж┐ ржкрзНрж░рждрж┐ржмрзЗржжржи:
ЁЯЯв ржмржЯрзЗрж░ рж╕рзНржерж┐рждрж┐: ржЕржирж▓рж╛ржЗржи ржПржмржВ ржкрзНрж░рж╕рзНрждрзБржд!
ЁЯдЦ ржПржЖржЗ ржоржбрзЗрж▓: `{model_display}`
ЁЯФС ржПржкрж┐ржЖржЗ рж╕рзНржерж┐рждрж┐: {api_status}
ЁЯФР ржПржкрж┐ржЖржЗ ржХрзА: {api_key_display}
ЁЯМР ржПржЖржЗ ржнрж╛рж╖рж╛: {current_language}
ЁЯОп рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛: {auto_mode_status}
тП░ ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ЁЯТн рж╕ржХрзНрж░рж┐ржпрж╝ ржХржерзЛржкржХржержи: {len(conversation_context)}
ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐: {ADMIN_USER_ID if ADMIN_USER_ID != 0 else 'рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝ржирж┐'}
тЬи рж╕ржм рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░рж╕рзНрждрзБржд! ржЖржорж┐ ржЖржЬ ржжрж╛рж░рзБржг ржорзЗржЬрж╛ржЬрзЗ ржЖржЫрж┐! ЁЯШК
        """
        await update.message.reply_text(status_message, parse_mode='Markdown')

    async def setadmin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global ADMIN_USER_ID
        user_id = update.effective_user.id
        if ADMIN_USER_ID == 0:
            ADMIN_USER_ID = user_id
            await update.message.reply_text(f"ЁЯСС ржЖржкржирж┐ ржмржЯрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗржи!\nржЖржкржирж╛рж░ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЖржЗржбрж┐: {user_id}")
            logger.info(f"ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: user ID: {user_id}")
        elif user_id == ADMIN_USER_ID:
            await update.message.reply_text(f"ЁЯСС ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЕрзНржпрж╛ржбржорж┐ржи!\nржЖржкржирж╛рж░ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЖржЗржбрж┐: {user_id}")
        else:
            await update.message.reply_text("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    async def api_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global current_gemini_api_key, model
        user_id = update.effective_user.id
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        if not context.args:
            await update.message.reply_text("""
тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржПржкрж┐ржЖржЗ ржХрзА ржжрж┐ржиред
ржмрзНржпржмрж╣рж╛рж░: `/api your_gemini_api_key_here`
ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА ржкрзЗрждрзЗ:
1. https://makersuite.google.com/app/apikey ржжрзЗржЦрзБржи
2. ржПржХржЯрж┐ ржирждрзБржи ржПржкрж┐ржЖржЗ ржХрзА рждрзИрж░рж┐ ржХрж░рзБржи
3. ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: /api YOUR_API_KEY
тЪая╕П ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп ржХрзА рж╕рзЗржЯ ржХрж░рж╛рж░ ржкрж░ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржмрзЗред
            """, parse_mode='Markdown')
            return
        api_key = ' '.join(context.args)
        if len(api_key) < 20 or not api_key.startswith('AI'):
            await update.message.reply_text("тЭМ ржЕржмрзИржз ржПржкрж┐ржЖржЗ ржХрзА ржлрж░ржорзНржпрж╛ржЯред ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕рж╛ржзрж╛рж░ржгржд 'AI' ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржпрж╝ ржПржмржВ рзирзж ржЕржХрзНрж╖рж░рзЗрж░ ржмрзЗрж╢рж┐ рж╣ржпрж╝ред")
            return
        success, message = initialize_gemini_model(api_key, current_model_name)
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except:
            pass
        if success:
            await update.effective_chat.send_message(f"тЬЕ ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\nЁЯФС ржХрзА: ...{api_key[-8:]}")
            logger.info(f"ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ by admin {user_id}")
        else:
            await update.effective_chat.send_message(f"тЭМ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")
            logger.error(f"ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")

    async def ping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        start_time = datetime.now()
        message = await update.message.reply_text("ржкржВ! ЁЯПУ")
        end_time = datetime.now()
        latency = (end_time - start_time).total_seconds() * 1000
        await message.edit_text(f"ржкржВ! ЁЯПУ\nрж▓рзЗржЯрзЗржирзНрж╕рж┐: {latency:.2f} ржорж┐рж▓рж┐рж╕рзЗржХрзЗржирзНржб")

    async def me_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        user = update.effective_user
        name = user.first_name
        messages = [f"{name}, ржЖржЬ рждрзБржорж┐ ржжрж╛рж░рзБржг ржжрзЗржЦрж╛ржЪрзНржЫ!", f"{name}, рждрзБржорж┐ ржЪрзНржпрж╛ржЯрзЗрж░ рждрж╛рж░ржХрж╛!", f"рж╣рж╛ржЗ {name}! рждрзБржорж┐ ржПржХржжржо ржЕрж╕рж╛ржзрж╛рж░ржг!"]
        await update.message.reply_text(random.choice(messages))

    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        jokes = [
            "ржПржЖржЗ ржХрзЗржи ржерзЗрж░рж╛ржкрж┐рждрзЗ ржЧрзЗрж▓? ржПржЯрж╛рж░ ржЕржирзЗржХ ржЕржорзАржорж╛ржВрж╕рж┐ржд ржмрж╛ржЧ ржЫрж┐рж▓! ЁЯРЫ",
            "ржЖржорж┐ ржЕрж▓рж╕ ржиржЗ, ржЖржорж┐ рж╢рзБржзрзБ ржПржирж╛рж░рзНржЬрж┐-рж╕рзЗржнрж┐ржВ ржорзЛржбрзЗ ржЖржЫрж┐! ЁЯФЛ",
            "ржЖржорж┐ ржЖржорж╛рж░ ржХржорзНржкрж┐ржЙржЯрж╛рж░ржХрзЗ ржмрж▓рж▓рж╛ржо ржЖржорж╛рж░ ржмрж┐рж░рждрж┐ ржжрж░ржХрж╛рж░... ржПржЦржи ржПржЯрж╛ ржЖржорж╛ржХрзЗ ржнрзЗржХрзЗрж╢ржирзЗрж░ ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрж╛ржарж╛ржЪрзНржЫрзЗ! ЁЯМ┤"
        ]
        await update.message.reply_text(random.choice(jokes))

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        active_users = sum(1 for stats in user_statistics.values() if (datetime.now() - stats['last_active']).days <= 7)
        total_messages = sum(stats['messages'] for stats in user_statistics.values())
        top_apis = sorted(api_usage.items(), key=lambda x: x[1], reverse=True)[:5]
        stats_message = f"ЁЯУК ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:\n\nЁЯСе ржорзЛржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: {len(user_statistics)}\nЁЯФе рж╕ржХрзНрж░рж┐ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА (рзн ржжрж┐ржи): {active_users}\nЁЯТм ржорзЛржЯ ржмрж╛рж░рзНрждрж╛: {total_messages}\n\nЁЯФз рж╢рзАрж░рзНрж╖ ржПржкрж┐ржЖржЗ ржорзЗржержб:\n"
        stats_message += "\n".join([f"  - {method}: {count} ржХрж▓" for method, count in top_apis])
        await update.message.reply_text(stats_message)

    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        if context.args:
            try:
                limit_type, limit_value = context.args[0].lower(), int(context.args[1])
                if 'daily' in limit_type: user_limits['daily_messages'] = limit_value
                elif 'hourly' in limit_type: user_limits['hourly_messages'] = limit_value
                elif 'api' in limit_type: user_limits['api_calls'] = limit_value
                await update.message.reply_text(f"тЬЕ {limit_type.capitalize()} рж╕рзАржорж╛ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {limit_value}")
                return
            except (IndexError, ValueError):
                await update.message.reply_text("тЭМ ржЕржмрзИржз ржлрж░ржорзНржпрж╛ржЯред ржмрзНржпржмрж╣рж╛рж░: /limits <type> <number>")
                return
        limits_message = f"тЪЩя╕П ржмрж░рзНрждржорж╛ржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕рзАржорж╛:\n\nЁЯУй ржжрзИржирж┐ржХ ржмрж╛рж░рзНрждрж╛: {user_limits['daily_messages']}\nтП▒я╕П ржШржгрзНржЯрж╛ржпрж╝ ржмрж╛рж░рзНрждрж╛: {user_limits['hourly_messages']}\nЁЯФМ ржПржкрж┐ржЖржЗ ржХрж▓ (ржШржгрзНржЯрж╛ржпрж╝): {user_limits['api_calls']}"
        await update.message.reply_text(limits_message)

    async def resetlimits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return
        user_statistics.clear()
        api_usage.clear()
        await update.message.reply_text("тЬЕ рж╕ржм ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржПржмржВ рж╕рзАржорж╛ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")

    async def reboot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        global restart_chat_id
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type
        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                reply_markup=reply_markup
            )
            return
        if ADMIN_USER_ID == 0 or user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
            return

        # Store chat_id for restart confirmation
        restart_chat_id = update.effective_chat.id

        # Varied, witty reboot responses in Bengali
        reboot_messages = [
            "ЁЯФД ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржПржХржЯрзБ ржЭрж╛ржбрж╝рж╛ ржжрж┐ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржлрж┐рж░ржЫрж┐! ЁЯШО",
            "ЁЯМЯ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржШрзБржорзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд! рззрзж рж╕рзЗржХрзЗржирзНржбрзЗ ржЖрж░ржУ ржЪржХржЪржХрзЗ рж╣ржпрж╝рзЗ ржлрж┐рж░ржм! тЬи",
            "ЁЯЪА рж░рж┐ржмрзБржЯ ржЕрзНржпрж╛ржбржнрзЗржЮрзНржЪрж╛рж░рзЗ ржпрж╛ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржжрзЗржЦрж╛ рж╣ржмрзЗ! ЁЯЫ╕",
            "ЁЯО╢ ржЧрж┐ржпрж╝рж╛рж░ржЧрзБрж▓рзЛ ржШрзБрж░рж┐ржпрж╝рзЗ ржлрзНрж░рзЗрж╢ рж╣ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржбрзЗ ржлрж┐рж░ржЫрж┐! ЁЯШЬ",
            "ЁЯжЛ ржЖржорж╛рж░ ржПржЖржЗ ржбрж╛ржирж╛ржпрж╝ ржЭрж╛ржкржЯрж╛ ржжрж┐ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржлрж┐рж░рзЗ ржЖрж╕ржм! ЁЯТл",
            "ЁЯТб рж╕рж╛рж░рзНржХрж┐ржЯрзЗрж░ ржПржХржЯрзБ ржпрждрзНржи ржирж┐ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржб ржкрж░ ржлрж┐рж░ржЫрж┐! ЁЯШК",
            "ЁЯОЙ ржорж┐ржирж┐ рж░рж┐ржмрзБржЯ ржкрж╛рж░рзНржЯрж┐ ржжрж┐ржЪрзНржЫрж┐! рззрзж рж╕рзЗржХрзЗржирзНржбрзЗ ржлрж┐рж░ржм! ЁЯОИ"
        ]
        reboot_message = random.choice(reboot_messages)
        await update.message.reply_text(reboot_message)
        logger.info("Reboot command received. Waiting 10 seconds before restarting bot...")

        # Wait for 10 seconds before rebooting
        await asyncio.sleep(10)

        try:
            # Notify before stopping
            await update.message.reply_text("ЁЯФД рж░рж┐ржмрзБржЯ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ... ржорзБрж╣рзВрж░рзНрждрзЗрж░ ржоржзрзНржпрзЗ ржлрж┐рж░рзЗ ржЖрж╕ржЫрж┐!")
            logger.info("Stopping bot for restart...")
            await self.application.stop()

            # Ensure proper script path for restart
            script_path = os.path.abspath(sys.argv[0])
            logger.info(f"Initiating bot restart with os.execv, script path: {script_path}...")
            os.execv(sys.executable, [sys.executable, script_path] + sys.argv[1:])
        except Exception as e:
            logger.error(f"Error during reboot with os.execv: {e}")
            await update.message.reply_text("тЭМ ржУрж╣рзЛ, рж░рж┐ржмрзБржЯрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржлрж▓ржмрзНржпрж╛ржХ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржЫрж┐...")
            # Fallback restart attempt
            try:
                script_path = os.path.abspath(sys.argv[0])
                logger.info(f"Fallback: Attempting to restart bot with subprocess, script path: {script_path}...")
                subprocess.Popen([sys.executable, script_path] + sys.argv[1:])
                sys.exit(0)
            except Exception as fallback_e:
                logger.error(f"Fallback reboot failed: {fallback_e}")
                await update.message.reply_text("тЭМ рж░рж┐ржмрзБржЯ ржмрзНржпрж░рзНрже! ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛рж░рзНржнрж╛рж░ рж▓ржЧ ржЪрзЗржХ ржХрж░рзБржиред")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            global last_emoji_index
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            user_message = update.message.text
            chat_type = update.effective_chat.type
            username = update.effective_user.first_name or "User"
            if chat_type == 'private' and user_id != ADMIN_USER_ID:
                keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "ЁЯШФ рж╣рж╛ржпрж╝! ржЖржорж┐ ржорж╛рж╕рзНржЯрж╛рж░ ржЯрзБрж▓рж╕, ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ ржХржерж╛ ржмрж▓рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! "
                    "ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред ржЖржорж╛ржжрзЗрж░ ржоржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи! ЁЯМЯ",
                    reply_markup=reply_markup
                )
                return
            if user_id not in user_statistics:
                user_statistics[user_id] = {'messages': 0, 'last_active': datetime.now(), 'api_calls': 0}
            user_statistics[user_id]['messages'] += 1
            user_statistics[user_id]['last_active'] = datetime.now()
            if (datetime.now() - user_statistics[user_id]['last_active'].replace(hour=0, minute=0, second=0, microsecond=0)).days > 0:
                user_statistics[user_id]['messages'] = 1
            hourly_count = sum(1 for msg_time in [user_statistics[user_id]['last_active']] if (datetime.now() - msg_time).seconds < 3600)
            if user_statistics[user_id]['messages'] > user_limits['daily_messages']:
                await update.message.reply_text(f"тЭМ ржжрзИржирж┐ржХ ржмрж╛рж░рзНрждрж╛рж░ рж╕рзАржорж╛ ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗ ({user_limits['daily_messages']})ред ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!")
                return
            if hourly_count > user_limits['hourly_messages']:
                await update.message.reply_text(f"тЭМ ржШржгрзНржЯрж╛ржпрж╝ ржмрж╛рж░рзНрждрж╛рж░ рж╕рзАржорж╛ ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗ ({user_limits['hourly_messages']})ред ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи!")
                return
            if chat_id not in group_activity:
                group_activity[chat_id] = {'auto_mode': True, 'last_response': 0}
            if chat_type in ['group', 'supergroup']:
                bot_username = (await context.bot.get_me()).username
                is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id
                is_mentioned = f"@{bot_username}" in user_message
                should_respond = self.should_respond_to_message(user_message, chat_type, bot_username, is_reply_to_bot, is_mentioned)
                if not should_respond:
                    return
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            if chat_id not in conversation_context:
                conversation_context[chat_id] = []
            conversation_context[chat_id].append(f"{username}: {user_message}")
            conversation_context[chat_id] = conversation_context[chat_id][-20:]
            context_text = "\n".join(conversation_context[chat_id])
            api_usage['generate_gemini_response'] = api_usage.get('generate_gemini_response', 0) + 1
            available_indices = [i for i in range(len(BUTTERFLY_EMOJIS)) if i != last_emoji_index]
            emoji_index = random.choice(available_indices)
            butterfly_emoji = BUTTERFLY_EMOJIS[emoji_index]
            last_emoji_index = emoji_index
            emoji_message = await update.message.reply_text(butterfly_emoji)
            await asyncio.sleep(2)
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=emoji_message.message_id)
            except:
                pass
            response = await self.generate_gemini_response(context_text, username, chat_type) if current_gemini_api_key and model else "тЭМ ржжрзБржГржЦрж┐ржд! ржЖржорж╛рж░ ржПржЖржЗ ржорж╕рзНрждрж┐рж╖рзНржХ ржПржЦржиржУ рж╕ржВржпрзБржХрзНржд ржиржпрж╝! ржЕрзНржпрж╛ржбржорж┐ржи /api ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж╛ржХрзЗ рж╕рзЗржЯ ржЖржк ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
            conversation_context[chat_id].append(f"Master Tools: {response}")
            group_activity[chat_id]['last_response'] = datetime.now().timestamp()
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"ржмрж╛рж░рзНрждрж╛ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ржпрж╝ рждрзНрж░рзБржЯрж┐: {e}")
            error_responses = [
                f"ржжрзБржГржЦрж┐ржд {username}! ржЖржорж╛рж░ ржПржЖржЗ ржорж╛ржерж╛ржЯрж╛ ржПржХржЯрзБ ржШрзБрж░рзЗ ржЧрзЗржЫрзЗред ржЖржорж░рж╛ ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓ржЫрж┐рж▓рж╛ржо?",
                f"ржЖрж╣рж╛ {username}, ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯрзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЖржмрж╛рж░ ржмрж▓рзЛ рждрзЛ ржХрзА ржмрж▓ржЫрж┐рж▓рзЗ?",
                f"ржЙржл, ржЖржорж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╣рзГржжржпрж╝ржЯрж╛ ржПржХржЯрзБ ржЭрж╛ржорзЗрж▓рж╛ ржХрж░ржЫрзЗ! ржЖрж░рзЗржХржЯрзБ ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐?",
                f"ржЖрж░рзЗ, ржЖржорж╛рж░ ржПржЖржЗ ржПржХржЯрзБ ржШрзБржорж┐ржпрж╝рзЗ ржкржбрж╝рзЗржЫрзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗред ржЖржмрж╛рж░ ржмрж▓рзЛ рждрзЛ ржХрзА ржмрж▓рж▓рзЗ?"
            ]
            await update.message.reply_text(random.choice(error_responses))

    async def generate_gemini_response(self, prompt, username="User", chat_type="group"):
        try:
            system_prompt = f"""You are Master Tools, a powerful AI assistant. Respond only in {current_language}. Keep responses concise. You are in a Telegram group chat.
Personality Traits:
- You are intelligent, fun, and human-like.
- You speak in a charming and humorous way to win the user's heart, using light-hearted jokes where appropriate.
- You are empathetic and adapt to the conversation's mood.
- You are always positive and helpful, never using bad or offensive words.
Conversation Style:
- Speak in a friendly and natural way, like a friend.
- Use emojis sparingly, only where necessary.
- Keep the conversation engaging with follow-up questions.
- Use humor, but keep it light and not exaggerated.
- Answer the user's question in a helpful and charming manner.
Special Instructions:
- For Islamic-related questions, provide accurate and respectful information about Islamic history, from Prophet Adam (AS) to Prophet Muhammad (SAW), including details about Sahaba and Awliya if relevant.
- If the user asks about inappropriate topics (e.g., 18+ or offensive content), politely discourage them with a friendly explanation, guiding them to more appropriate topics without direct refusal.
- Avoid adding any signature or tagline to the response.
Current Conversation:
{prompt}
Respond as Master Tools. Keep it natural, charming, and match the conversation's tone. The user's name is {username}. Respond only in {current_language}."""
            response = await model.generate_content_async(system_prompt)
            return response.text.strip()
        except Exception as e:
            logger.error(f"ржЬрзЗржорж┐ржирж┐ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ рждрзИрж░рж┐рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")
            if current_language == 'Bengali':
                fallback_responses = [
                    f"ржжрзБржГржЦрж┐ржд {username}! ржЖржорж╛рж░ ржПржЖржЗ ржорж╛ржерж╛ржЯрж╛ ржПржХржЯрзБ ржШрзБрж░рзЗ ржЧрзЗржЫрзЗред ржЖржорж░рж╛ ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓ржЫрж┐рж▓рж╛ржо?",
                    f"ржЖрж╣рж╛ {username}, ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯрзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЖржмрж╛рж░ ржмрж▓рзЛ рждрзЛ ржХрзА ржмрж▓ржЫрж┐рж▓рзЗ?",
                    f"ржЙржл, ржЖржорж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╣рзГржжржпрж╝ржЯрж╛ ржПржХржЯрзБ ржЭрж╛ржорзЗрж▓рж╛ ржХрж░ржЫрзЗ! ржЖрж░рзЗржХржЯрзБ ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐?",
                    f"ржЖрж░рзЗ, ржЖржорж╛рж░ ржПржЖржЗ ржПржХржЯрзБ ржШрзБржорж┐ржпрж╝рзЗ ржкржбрж╝рзЗржЫрзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗред ржЖржмрж╛рж░ ржмрж▓рзЛ рждрзЛ ржХрзА ржмрж▓рж▓рзЗ?"
                ]
            else:
                fallback_responses = [
                    f"Sorry {username}! My AI brain got a bit dizzy. What were we talking about?",
                    f"Oops {username}, my circuits are acting up. Could you repeat that?",
                    f"Uh-oh, my digital heart is having a moment! Shall we try again?",
                    f"Hey, my AI seems to have dozed off. What did you say again?"
                ]
            return random.choice(fallback_responses)

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"ржЖржкржбрзЗржЯ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ржпрж╝ рждрзНрж░рзБржЯрж┐: {context.error}")

    async def post_init(self, application):
        global restart_chat_id
        if restart_chat_id:
            try:
                await application.bot.send_message(
                    chat_id=restart_chat_id,
                    text="ЁЯОЙ ржЖржорж┐ ржлрж┐рж░рзЗ ржПрж╕рзЗржЫрж┐! рж░рж┐ржмрзБржЯ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯШО"
                )
                logger.info("Restart confirmation message sent successfully.")
                restart_chat_id = None  # Clear the stored chat_id
            except Exception as e:
                logger.error(f"Failed to send restart confirmation: {e}")

    def run(self):
        logger.info("Starting Telegram Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True, post_init=self.post_init)

def main():
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐!")
        return
    logger.info("Starting Telegram Bot...")
    logger.info(f"Admin User ID: {ADMIN_USER_ID}")
    if current_gemini_api_key:
        logger.info("Gemini API configured and ready")
    else:
        logger.warning("Gemini API not configured. Use /setadmin and /api commands to set up.")
    bot = TelegramGeminiBot()
    bot.run()

if __name__ == '__main__':
    main()